---
.terraform_template: &terraform_settings
  image: devopsinfra/docker-terragrunt:aws-tf-1.9.7-tg-0.68.1

variables:
  # The relative path to the root directory of the Terraform project
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  # The name of the state file used by the GitLab Managed Terraform state backend
  TF_STATE_NAME: default
  TF_AUTO_DEPLOY: "false"

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/
    - ${CI_PROJECT_DIR}/terraform/environments/development/.terraform/
    - ${CI_PROJECT_DIR}/terraform/environments/production/.terraform/

# NOTE(zstyblik): fmt doesn't need init
.terraform:fmt:
  <<: *terraform_settings
  stage: validate
  script:
    - cd "${TF_ROOT}"
    - terraform fmt -check -diff -recursive

.terraform:validate:
  <<: *terraform_settings
  stage: validate
  script:
    - cd "${TF_ROOT}"
    - terraform init
    - terraform validate

.terraform:plan:
  <<: *terraform_settings
  stage: plan
  script:
    - cd "${TF_ROOT}"
    - terraform plan -out=tfplan
  resource_group: ${TF_STATE_NAME}
  artifacts:
    public: false
    paths:
      - ${TF_ROOT}/tfplan

.terraform:deploy:
  <<: *terraform_settings
  stage: deploy
  script:
    - cd "${TF_ROOT}"
    - terraform apply tfplan
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $TF_AUTO_DEPLOY == "true"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

.terraform:destroy:
  <<: *terraform_settings
  stage: deploy
  script:
    - cd "${TF_ROOT}"
    - terraform init
    - terraform destroy
  resource_group: ${TF_STATE_NAME}
